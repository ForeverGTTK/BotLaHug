"""
app models the container application db
here we have the existing urls (users/sites)
inside the app there are individual models that could be attached for each club
"""

from enum import unique
from typing import Dict, List
from unittest.util import _MAX_LENGTH
from xml.parsers.expat import model
from django.contrib.auth.models import User
from django.db import models
from django.shortcuts import get_object_or_404
from multiselectfield import MultiSelectField
from django.utils import timezone
import uuid

class BaseModel(models.Model):
    """
    a base model to serve as a template for a table in the app.
    Base model columns: 
        ID(UUID-unique autoGenerated),
        created_by(USER-ID)
        created_by(datetime-autoGenerated)
        last_updated(datetime-last updated)
        description(TextField- notRequired)
    """
    
    ID = models.UUIDField(default=uuid.uuid4, editable=False, unique=True, primary_key=True)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True, editable=False)
    last_updated = models.DateTimeField(auto_now=True)
    description = models.TextField(null=True, blank=True)

    class Meta:
        abstract = True

class Images(BaseModel):
    """
    Represents an image in the system.
    
    Fields:
        image (ImageField): The image file itself.
        club (ForeignKey to Clubs): The club associated with the image.
        page (CharField): The page or section of the site where the image is used (e.g., 'Article', 'Home', etc.).
        description (TextField): A brief description or alt text for the image.
        uploaded_at (DateTimeField): The date and time when the image was uploaded.
    """
    
    image = models.ImageField(upload_to='images/', null=False, blank=False)
    club = models.ForeignKey('Clubs', on_delete=models.CASCADE, related_name='images')
    page = models.CharField(max_length=100)  # To indicate which part of the site uses this image
    name = models.CharField(max_length=100,null=True, blank=True)
   
    

    def get_images_for_page(club, page: str,name:str=None) -> List[str]:
        """
        Returns a list of image URLs or descriptions for a specific club and page.
    
        Args:
            club (Clubs): The club associated with the image(s).
            page (str): The page or section of the site where the image is used (e.g., 'Article', 'Home', etc.).
    
        Returns:
            List[str]: A list of image URLs or their descriptions if no URL is available.
        """
        if name is None:
            images = Images.objects.filter(club=club, page=page)
        else:
            images = Images.objects.filter(club=club, page=page,name=name)
        image_list = []

        for image in images:
            if image.image:
                image_list.append(image.image.url)
            else:
                image_list.append("No image available")  # Fallback if no image or description

    def __str__(self):
        return f"Image for {self.club.name} on {self.page} page"

class Topics(BaseModel):
    """
    Represents topics that can be associated with clubs.
    
    Fields:
        name (TextField): The name of the topic (must be unique).
    
    Methods:
        get_club_topics(club_id): Returns topics associated with a specific club.
        get_topic_clubs(topic_name): Returns clubs associated with a specific topic.
    """
    
    name = models.TextField(null=True, blank=True, unique=True)
    
    def get_club_topics(club_id):
        """
        Fetches all topics associated with a particular club.
        """
        return topic_relations.objects.filter(club_ID=club_id).values_list('topic', flat=True)

    def get_topic_clubs(topic_name):
        """
        Fetches all clubs associated with a particular topic.
        """
        return topic_relations.objects.filter(topic__name=topic_name)

    def __str__(self):
        return self.name


class Clubs(BaseModel):
    """
    Represents a club with various attributes.
    
    Fields:
        name (CharField): The name of the club.
        topic (ForeignKey to Topics): The associated topic for the club.
        location (CharField): The location of the club.
        web_name (CharField): The web address or URL-friendly name for the club.
        contact_email (EmailField): The email address for the club's contact.
        contact_phone (CharField): The phone number for the club's contact.
        contact_person (CharField): The name of the primary contact person for the club.
    """
    
    name = models.CharField(max_length=255,unique=True, null=False, blank=False)
    topic = models.ForeignKey(Topics, on_delete=models.CASCADE, null=True, related_name='clubs')
    location = models.CharField(max_length=255, null=True, blank=True)
    web_name = models.CharField(max_length=100, unique=True, null=False, blank=False)
    
    # Contact Information
    contact_email = models.EmailField(null=True, blank=True)
    contact_phone = models.CharField(max_length=15, null=True, blank=True)  # Assuming international phone numbers
    contact_person = models.CharField(max_length=255, null=True, blank=True)
    
    def get_clubs():
        """
        Returns a dictionary where the key is the club name and the value is a dictionary containing the photo URL, description, and web_name of each club associated with this topic.
        """
        # Fetch all clubs associated with this topic using topic_relations
        topics = Topics.objects.all()
        sorted_clubs = {}
        for topic in topics:
            club_relations = topic_relations.objects.filter(topic=topic)
            clubs = {}
            for relation in club_relations:
                club = relation.club_ID  # Access the club from the relation
            
               # Fetch images from the Images table
                image = get_object_or_404(Images,club=club, page='home',name='logo')

                # Create a dictionary with image URL, description, and web_name for each club
                clubs[club.name] = {
                    'photo': image,  # Get the first image URL if available
                    'description': club.description,
                    'web_name': club.web_name
                }
            sorted_clubs[topic.name] = clubs
        return sorted_clubs

    def get_club(self):
        """
        Returns a dictionary containing club information including BaseModel fields.
        """
        image = get_object_or_404(Images,club=self.ID, page='home',name='logo')

        return {
            'ID': str(self.ID),
            'created_by': self.created_by.username if self.created_by else None,
            'created_at': self.created_at.date,
            'last_updated': self.last_updated,
            'description': self.description,
            'name': self.name,
            'topic': self.topic.name if self.topic else None,  # Get topic name
            'location': self.location,
            'photo': image,
            'web_name': self.web_name,
            'contact_email': self.contact_email,
            'contact_phone': self.contact_phone,
            'contact_person': self.contact_person,
        }

    def __str__(self):
        return f'{self.name}, a {self.topic} club'

class topic_relations(BaseModel):
    """
    Represents the relationship between topics and clubs.
    
    Fields:
        topic (ForeignKey to Topics): The topic associated with the club.
        club_ID (ForeignKey to Clubs): The club associated with the topic.
        
    Methods:
        get_club_topics(club_id): Returns all topics related to a given club.
        get_topic_clubs(topic_name): Returns all clubs related to a specific topic.
    """
    
    topic = models.ForeignKey(Topics, on_delete=models.CASCADE, null=True)
    club_ID = models.ForeignKey(Clubs, on_delete=models.CASCADE, null=True)

    @staticmethod
    def get_club_topics(club_id):
        """
        Fetches all topics related to a specific club.
        """
        return topic_relations.objects.filter(club_ID=club_id).values_list('topic', flat=True)

    @staticmethod
    def get_topic_clubs(topic_name):
        """
        Fetches all clubs related to a specific topic.
        """
        return topic_relations.objects.filter(topic__name=topic_name)

    def __str__(self):
        return f'{self.club_ID} related to topic {self.topic}'
    


    
class Design(BaseModel):
    """
    Represents the design attributes for a club's webpage.
    
    Fields:
        club (ForeignKey to Clubs): The club that this design is associated with.
        color (CharField): The primary color used in the design.
        text (TextField): The primary text content or style information.
        font (CharField): The font style used in the webpage.
        background_image (ImageField): Background image for the webpage.
    """
    
    club = models.OneToOneField(Clubs, on_delete=models.CASCADE, related_name='design')
    color = models.CharField(max_length=7, default='#FFFFFF')  # Hex color value
    text = models.TextField(null=True, blank=True)
    font = models.CharField(max_length=100, null=True, blank=True)
    background_image = models.ImageField(upload_to='design_backgrounds/', null=True, blank=True)

    def edit_design(self, new_color=None, new_text=None, new_font=None, new_background_image=None):
        """
        Method to update the design attributes for a club's webpage.
        
        Args:
            new_color (str): New hex color code for the design.
            new_text (str): New text or style content.
            new_font (str): New font style for the webpage.
            new_background_image (ImageField): New background image.
        """
        if new_color:
            self.color = new_color
        if new_text:
            self.text = new_text
        if new_font:
            self.font = new_font
        if new_background_image:
            self.background_image = new_background_image
        self.save()

    def __str__(self):
        return f'Design for {self.club.name}'
    
class Article(BaseModel):
    """
    Represents an article in the system.

    Fields:
        title (CharField): The title of the article.
        content (TextField): The body of the article.
        author (ForeignKey to User): The author who created the article.
        club (ForeignKey to Clubs): The club related to the article.
        published (BooleanField): Indicates if the article is published.
        publication_date (DateTimeField): The date and time the article was published.
        tags (CharField): A comma-separated list of tags for the article.
        images (ImageField): Images related to the article.
    """

    title = models.CharField(max_length=255)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='articles')
    club = models.ForeignKey('Clubs', on_delete=models.CASCADE, related_name='articles')
    published = models.BooleanField(default=False)
    publication_date = models.DateTimeField(null=True, blank=True)
    tags = models.CharField(max_length=255, null=True, blank=True)

    class Meta:
        ordering = ['-publication_date']

    def __str__(self):
        return self.title
    
class Season(BaseModel):
    """
    Represents a season for a club.
    
    Fields:
        club (ForeignKey to Clubs): The club associated with the season.
        start_date (DateField): The date when the season starts.
        end_date (DateField): The date when the season ends.
        description (TextField): Optional field to provide details about the season.
        is_active (BooleanField): Indicates whether the season is currently active.
    """
    
    club = models.ForeignKey('Clubs', on_delete=models.CASCADE, related_name='seasons')
    start_date = models.DateField()
    end_date = models.DateField()
    is_active = models.BooleanField(default=True)  
    
    class Meta:
        ordering = ['-start_date']
    
    def __str__(self):
        return f"{self.club.name} Season {self.start_date.year} - {self.end_date.year}"
    
    def is_current_season(self):
        """
        Returns True if the current date is between the start and end date.
        """
        from django.utils import timezone
        now = timezone.now().date()
        return self.start_date <= now <= self.end_date
    
class Athlete(BaseModel):
    """
    Represents an athlete with personal and contact details.
    
    Fields:
        athlete_id (CharField): A unique identifier for the athlete.
        club (ForeignKey to Clubs): The club to which the athlete belongs.
        first_name (CharField): The athlete's first name.
        last_name (CharField): The athlete's last name.
        dob (DateField): The date of birth of the athlete.
        email (EmailField): The athlete's email address.
        phone (CharField): The athlete's phone number.
        parent_name (CharField): The name of the athlete's parent or guardian.
        parent_phone (CharField): The phone number of the athlete's parent or guardian.
        home_address (TextField): The home address of the athlete.
        profile_picture (ImageField): The profile picture of the athlete.
    """
    
    athlete_id = models.CharField(max_length=10, null=True, blank=True)
    club = models.ForeignKey('Clubs', on_delete=models.CASCADE, related_name='athletes')
    first_name = models.CharField(max_length=100, null=False, blank=False)
    last_name = models.CharField(max_length=100, null=False, blank=False)
    dob = models.DateField(null=False, blank=False)
    email = models.EmailField(null=False, blank=False)
    phone = models.CharField(max_length=10, null=False, blank=True)  
    parent_name = models.CharField(max_length=100, null=True, blank=True)
    parent_phone = models.CharField(max_length=10, null=True, blank=True)
    home_address = models.TextField(null=True, blank=True)
    profile_picture = models.ImageField(upload_to='profile_pictures/', null=True, blank=True)

    def get_athlete(self):
        """
        Returns a dictionary containing the athlete's information.
        """
        return {
            'ID': self.ID,
            'athlete_id': self.athlete_id,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'dob': self.dob,
            'email': self.email,
            'phone': self.phone,
            'parent_name': self.parent_name,
            'parent_phone': self.parent_phone,
            'home_address': self.home_address,
            'profile_picture': self.profile_picture.url if self.profile_picture else None,
        }

    def __str__(self):
        return f'{self.first_name} {self.last_name} (Athlete ID: {self.athlete_id})'
    
class Class(BaseModel):
    """
    Represents a class in the system.
    
    Fields:
        name (CharField): The name of the class.
        season (ForeignKey to Season): The season during which the class takes place.
        start_date (DateField): The start date of the class.
        end_date (DateField): The end date of the class.
        days_of_week (MultiSelectField): Days of the week when the class is held.
        start_time (TimeField): The time when the class starts (hour).
        end_time (TimeField): The time when the class ends (hour).
        place (CharField): The location of the class.
        teacher (CharField): The name of the teacher or instructor.
        price (DecimalField): The price of the class.
        registration_fee (DecimalField): The fee for registration.
    """
    DAYS_OF_WEEK = (
        ('sun', 'Sunday'),
        ('mon', 'Monday'),
        ('tue', 'Tuesday'),
        ('wed', 'Wednesday'),
        ('thu', 'Thursday'),
        ('fri', 'Friday'),
        ('sat', 'Saturday'),
    )
    name = models.CharField(max_length=255, null=False, blank=False)
    season = models.ForeignKey(Season, on_delete=models.CASCADE, related_name='classes')
    start_date = models.DateField(null=False, blank=False)
    end_date = models.DateField(null=False, blank=False)
    days_of_week = MultiSelectField(choices=DAYS_OF_WEEK, null=True, blank=True)
    start_time = models.TimeField(null=False, blank=False)
    end_time = models.TimeField(null=False, blank=False)
    place = models.CharField(max_length=255, null=True, blank=True)
    teacher = models.CharField(max_length=255, null=True, blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
    registration_fee = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)

    class Meta:
        ordering = ['start_date', 'start_time']
    
    def __str__(self):
        return f"{self.name} - {self.season}"

    @classmethod
    def get_classes_by_current_season(cls, club):
        """
        Fetch all the classes relevant to the current season for a specific club and return a dictionary
        with all the class details (description, teacher, place, price, registration fee).
        
        Args:
            club (Clubs): The club to fetch relevant classes for.
        
        Returns:
            dict: A dictionary where the key is the class name and the value is a dictionary with all class details.
        """
        from django.utils import timezone

        # Fetch the current date
        now = timezone.now().date()

        # Find the current season for the club based on the date range
        current_season = Season.objects.filter(club=club, is_active = True).first()

        # If there is no current season, return an empty dictionary
        if not current_season:
            return {}

        # Fetch classes for the current season
        classes = cls.objects.filter(season=current_season)

        # Prepare the dictionary with all the class details
        class_dict = {}
        for c in classes:
           class_dict.__setitem__(f'{c.name}',{ 
                'ID': c.ID,
                'name':c.name,
                'description': c.description,
                'teacher': c.teacher,
                'place': c.place,
                'price': c.price,
                'registration_fee': c.registration_fee,
                'start_date': c.start_date.strftime('%b %Y'),
                'end_date': c.end_date.strftime('%b %Y'),
                'start_time': c.start_time.strftime('%H:%M'),
                'end_time': c.end_time.strftime('%H:%M'),
            }
                                  )
        return class_dict